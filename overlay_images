
#import libraries 

import numpy as np
import os
import matplotlib.pyplot as plt
from skimage.util import img_as_ubyte
from PIL import Image


## paths to the images 
path_input='images/250_250'
path_output='images/Ground_truth_8bit'
image_segmented='images/segmented'
image_names=os.listdir(path_input)

# read images 
image=img_as_ubyte(plt.imread(os.path.join(path_input,image_names[0])))
ground_truth=img_as_ubyte(plt.imread(os.path.join(path_output,image_names[0])))
image_segmented=img_as_ubyte(plt.imread(os.path.join(path_output,image_names[0])))



def merge_image_mask(image,predicted):

# this used to visualised two images; original image and semgneted image (mask). 
    mask=np.zeros((image.shape[0],image.shape[1],3))
    mask[:,:,0]=predicted
    mask=np.array(mask,dtype=np.int8)
    image_pil=Image.fromarray(image)
    mask_pil=Image.fromarray(mask,'RGB')
    
    image_pil_RGBA = image_pil.convert("RGBA")
    mask_pil_RGBA = mask_pil.convert("RGBA")
    
    alphaBlended1 = Image.blend(image_pil_RGBA, mask_pil_RGBA, alpha=.15)
    return np.array(alphaBlended1)

def merge_image_mask_ground_truth(image,predicted,ground_truth):

# this used to visualise the orginal image and segmented image and ground truth image. 

    # Yellow is where it is correctly predicted
    #red is where it is not predicted
    # green is where is wrongly predicted
    
    # summary red is undersegmentation , green is oversegmentation
    mask=np.zeros((image.shape[0],image.shape[1],3))
    mask[:,:,0]=ground_truth
    mask[:,:,1]=predicted
    mask=np.array(mask,dtype=np.int8)
    image_pil=Image.fromarray(image)
    mask_pil=Image.fromarray(mask,'RGB')
    
    image_pil_RGBA = image_pil.convert("RGBA")
    mask_pil_RGBA = mask_pil.convert("RGBA")
    
    alphaBlended1 = Image.blend(image_pil_RGBA, mask_pil_RGBA, alpha=.3)
    return np.array(alphaBlended1)
    
 def combine_histogram(image, ground_truth, classe_names,class_vlues, color_list):
    #classe_names=['pore','bread']
# class_vlues=[0,255]
# color_list=['g','r']
# plt.figure(figsize = (10,10))
    alpa_value=0.3
    for i in range(len(class_vlues)):
        classe_image=(ground_truth==class_vlues[i])*image
        plt.hist(classe_image.flatten(),image.shape[0]+1,[1,256],color=color_list[i],alpha=alpa_value,label=classe_names[i])
        alpa_value+=0.1
    plt.legend(loc='upper right')
    

 plt.imshow(merge_image_mask_ground_truth(image,image_segmented,ground_truth))
 
